import random
import sqlite3

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import CallbackContext

from logger import log

img_market = open("market.jpg", 'rb')

con = sqlite3.connect("players.db", check_same_thread=False)
cur = con.cursor()
list_of_players = [i[0] for i in cur.execute('SELECT tg_id FROM cities').fetchall()]

(WAITING_FOR_CITY_NAME, MENU, RESOURCES, MARKET, POPULATION, CONSTRUCTION, FOREIGN_POLICY, INFO,
 WAITING_FOR_SUM_TO_BUY, CHANGE_OR_GO_TO_MENU_MARKET, NOT_ENOUGH_GOLD, BAD_SUMM, SUCCESSFUL_BUYING,
 WAITING_FOR_COUNT_TO_BUILD, SUCCESSFUL_BUILD, CHANGE_OR_GO_TO_MENU_BUILDINGS, WAITING_FOR_TYPE_OF_METAL,
 WAITING_FOR_COUNT_OF_METAL, SUCCESSFUL_REMELTING, CHANGE_OR_GO_TO_MENU_REMELTING) = range(20)

PRICE_OF_BUILDINGS = {
    'farms': [['wood', 240], ['stone', 120], ['iron', 240], ['food', 200]],
    'sawmills': [['wood', 240], ['stone', 120], ['iron', 240], ['food', 200]],
    'quarries': [['wood', 240], ['stone', 120], ['iron', 240], ['food', 200]],
    'iron_mines': [['wood', 240], ['stone', 120], ['iron', 240], ['food', 200]],
    'gold_mines': [['wood', 240], ['stone', 120], ['iron', 240], ['food', 200]]
}


@log
def get_info_about_city(update: Update, context: CallbackContext):
    resources_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    user_id = update.message.from_user.id
    farms = cur.execute('SELECT farms FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    quarries = cur.execute('SELECT quarries FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    sawmills = cur.execute('SELECT sawmills FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    iron_mines = cur.execute('SELECT iron_mines FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    gold_mines = cur.execute('SELECT gold_mines FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    city_name = cur.execute('SELECT city FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    x = float(cur.execute('SELECT city_level FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0])
    y = float(cur.execute('SELECT next_level FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0])
    city_level = '{}/{}'.format(int(x * 100), int(y * 100))
    population_support = \
    cur.execute('SELECT population_support FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    update.message.reply_text('–ì–æ—Ä–æ–¥ "{}"\n'
                              '–£—Ä–æ–≤–µ–Ω—å –≥–æ—Ä–æ–¥–∞: {}\n'
                              '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è: {}%'.format(city_name, '{} ({})'.format(int(x), city_level),
                                                                   int(population_support * 100)))
    update.message.reply_text('–í–∞—à–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è\n'
                              'üßëüèª‚Äçüåæ –§–µ—Ä–º—ã: {}\n'
                              'ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏: {}\n'
                              'ü™µ –õ–µ—Å–æ–ø–∏–ª–∫–∏: {}\n'
                              'üè≠ –®–∞—Ö—Ç—ã: {}\n'
                              'üí∞ –ó–æ–ª–æ—Ç—ã–µ —Ä—É–¥–Ω–∏–∫–∏: {}'.format(
        farms, quarries, sawmills, iron_mines, gold_mines), reply_markup=resources_markup)
    return INFO


@log
def resources(update: Update, context: CallbackContext):
    resources_markup = ReplyKeyboardMarkup([['–°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã'],
                                            ['–ü–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å —Ä—É–¥—É'],
                                            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    user_id = update.message.from_user.id
    stone = cur.execute('SELECT stone FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    wood = cur.execute('SELECT wood FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    food = cur.execute('SELECT food FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    iron = cur.execute('SELECT iron FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    gold = cur.execute('SELECT gold FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    gold_ore = cur.execute('SELECT gold_ore FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    iron_ore = cur.execute('SELECT iron_ore FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    update.message.reply_text('–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã\n'
                              'ü•© –ï–¥–∞: {}\nü™® –ö–∞–º–Ω–∏: {}\n'
                              'ü™µ –î–µ—Ä–µ–≤–æ: {}\nü•à –ñ–µ–ª–µ–∑–æ: {}\n'
                              'üí∞ –ó–æ–ª–æ—Ç–æ: {}\nüè≠ –ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞: {}\n'
                              'üè≠ –ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞: {}'.format(food, stone, wood, iron, gold, gold_ore, iron_ore),
                              reply_markup=resources_markup)
    return RESOURCES


@log
def market(update: Update, context: CallbackContext):
    market_markup = ReplyKeyboardMarkup([['–ï–¥–∞', '–î–µ—Ä–µ–≤–æ'],
                                         ['–ö–∞–º–Ω–∏', '–ñ–µ–ª–µ–∑–æ'],
                                         ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_photo(img_market, "–†—ã–Ω–æ–∫", reply_markup=market_markup)
    img_market.seek(0)
    return MARKET


@log
def population(update: Update, context: CallbackContext):
    population_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text("–í–∞—à–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ", reply_markup=population_markup)
    return POPULATION


@log
def construction(update: Update, context: CallbackContext):
    construction_markup = ReplyKeyboardMarkup([['–§–µ—Ä–º–∞', '–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è', '–õ–µ—Å–æ–ø–∏–ª–∫–∞'],
                                               ['–ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫', '–ó–æ–ª–æ—Ç–æ–π —Ä—É–¥–Ω–∏–∫'],
                                               ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(
        "–ö–∞–∫–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=construction_markup)
    return CONSTRUCTION


@log
def remelting(update: Update, context: CallbackContext):
    remelting_markup = ReplyKeyboardMarkup([['–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞', '–ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞'],
                                            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text('–ö–∞–∫–æ–π —Ç–∏–ø —Ä—É–¥—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å?', reply_markup=remelting_markup)
    return WAITING_FOR_TYPE_OF_METAL


@log
def cultivating(update: Update, context: CallbackContext):
    farms = cur.execute('SELECT farms FROM buildings WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    quarries = cur.execute('SELECT quarries FROM buildings WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    sawmills = cur.execute('SELECT sawmills FROM buildings WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    iron_mines = cur.execute('SELECT iron_mines FROM buildings WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    gold_mines = cur.execute('SELECT gold_mines FROM buildings WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    resources_markup = ReplyKeyboardMarkup([['–°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã'],
                                            ['–ü–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å —Ä—É–¥—É'],
                                            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    user_id = update.message.from_user.id

    last_cultivating = cur.execute('SELECT julianday(time)'
                                   'FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    timenow = cur.execute('SELECT julianday("now","localtime")').fetchone()[0]
    increment = timenow - last_cultivating
    if increment <= 1 / 144:
        update.message.reply_text('–†–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç ¬Ø\_(„ÉÑ)_/¬Ø \n'
                                  '–û—Å—Ç–∞–ª–æ—Å—å: {} –º–∏–Ω—É—Ç.'.format(round(10 - increment * 1440)))
        return RESOURCES
    inc_stone, inc_wood, inc_food, inc_gold_ore, inc_iron_ore = [round(increment * 240)] * 5
    delta = increment_resourses('stone', inc_stone * quarries, user_id)
    message = '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: '
    if delta != -1:
        inc_stone = delta
        message += '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–∞–º–Ω—è, '
    delta = increment_resourses('wood', inc_wood * sawmills, user_id)
    if delta != -1:
        inc_wood = delta
        message += '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–µ—Ä–µ–≤–∞, '
    delta = increment_resourses('food', inc_food * farms, user_id)
    if delta != -1:
        inc_food = delta
        message += '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ–¥—ã, '
    delta = increment_resourses('gold_ore', inc_gold_ore * gold_mines, user_id)
    if delta != -1:
        inc_gold_ore = delta
        message += '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã, '
    delta = increment_resourses('iron_ore', inc_iron_ore * iron_mines, user_id)
    if delta != -1:
        inc_iron_ore = delta
        message += '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã, '

    update.message.reply_text('–í—ã —Å–æ–±—Ä–∞–ª–∏: \n'
                              'ü•© –ï–¥—ã: {}\nü™® –ö–∞–º–Ω—è: {}\n'
                              'ü™µ –î–µ—Ä–µ–≤–∞: {}\nüè≠ –ó–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã: {}\n'
                              'üè≠ –ñ–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã: {}'.format(inc_food, inc_stone, inc_wood, inc_gold_ore, inc_iron_ore),
                              reply_markup=resources_markup)
    if message != '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ':
        update.message.reply_text('{}\n–í–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª—å—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞.'.format(message[:-2]), reply_markup=resources_markup)

    cur.execute('UPDATE resources SET time = datetime({}) WHERE tg_id = {}'.format(timenow, user_id))
    con.commit()

    return RESOURCES


@log
def buy_food(update: Update, context: CallbackContext):
    update.message.reply_text('–ó–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –µ–¥—ã')
    context.chat_data['material'] = 'food'
    return WAITING_FOR_SUM_TO_BUY


@log
def buy_wood(update: Update, context: CallbackContext):
    update.message.reply_text('–ó–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –¥–µ—Ä–µ–≤–∞')
    context.chat_data['material'] = 'wood'
    return WAITING_FOR_SUM_TO_BUY


@log
def buy_stone(update: Update, context: CallbackContext):
    update.message.reply_text('–ó–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –∫–∞–º–Ω—è')
    context.chat_data['material'] = 'stone'
    return WAITING_FOR_SUM_TO_BUY


@log
def buy_iron(update: Update, context: CallbackContext):
    update.message.reply_text('–ó–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –∂–µ–ª–µ–∑–∞')
    context.chat_data['material'] = 'iron'
    return WAITING_FOR_SUM_TO_BUY


@log
def check_buy(update: Update, context: CallbackContext):
    gold = cur.execute('SELECT gold FROM resources WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    markup_fail = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                      resize_keyboard=True)
    markup_success = ReplyKeyboardMarkup([['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                         resize_keyboard=True)
    try:
        summ = int(update.message.text)
        if summ > gold:
            update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!', reply_markup=markup_fail)
            return CHANGE_OR_GO_TO_MENU_MARKET
        elif summ <= 0:
            raise ValueError
        else:
            d = {'food': '–í–∞—à–∞ –µ–¥–∞', 'wood': '–í–∞—à–µ –¥–µ—Ä–µ–≤–æ', 'stone': '–í–∞—à–∏ –∫–∞–º–Ω–∏', 'iron': '–í–∞—à–µ –∂–µ–ª–µ–∑–æ'}
            before = cur.execute('SELECT {} FROM resources WHERE tg_id = {}'.format(context.chat_data['material'], update.message.from_user.id)).fetchone()[0]
            add_resources = summ * 5
            max_resources = 1000 * cur.execute('SELECT {} FROM buildings WHERE tg_id = {}'.format('{}_storages'.format(context.chat_data['material']), update.message.from_user.id)).fetchone()[0]
            if max_resources >= before + add_resources:
                update.message.reply_text('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É–ø–µ—à–Ω–æ!', reply_markup=markup_success)
                tranzaction_buy(context.chat_data['material'], summ, update.message.from_user.id)
                count = cur.execute('SELECT {} FROM resources WHERE tg_id = {}'
                                    .format(context.chat_data['material'], update.message.from_user.id)).fetchone()[0]
                gold = cur.execute('SELECT gold FROM resources WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
                update.message.reply_text('{}: {}\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {}'.format(d[context.chat_data['material']], count, gold))
                return SUCCESSFUL_BUYING
            else:
                update.message.reply_text('–í –≤–∞—à–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤!', reply_markup=markup_fail)
                return CHANGE_OR_GO_TO_MENU_MARKET
    except ValueError:
        update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.',
                                  reply_markup=markup_fail)
        return CHANGE_OR_GO_TO_MENU_MARKET


def upgrade_city_level(count, id):
    level_before = int(cur.execute('SELECT city_level FROM cities WHERE tg_id = {0}'.format(id, count)).fetchone()[0])
    cur.execute('UPDATE cities SET city_level = (SELECT city_level FROM cities WHERE tg_id = {0}) + {1} WHERE tg_id = {0} '
                'WHERE tg_id = {0}'.format(id, count))
    level_now = int(cur.execute('SELECT city_level FROM cities WHERE tg_id = {0}'.format(id, count)).fetchone()[0])
    if level_now > level_before:
        cur.execute('UPDATE cities SET next_level = {} + 1 WHERE tg_id = {}'.format(level_now, id))

    con.commit()


@log
def check_build(update: Update, context: CallbackContext):
    count_of_buildings = int(update.message.text)
    markup_fail = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                      resize_keyboard=True)
    markup_success = ReplyKeyboardMarkup([['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                         resize_keyboard=True)
    try:
        spisok = []
        if count_of_buildings <= 0:
            raise ValueError
        for i in PRICE_OF_BUILDINGS[context.chat_data['to_build']]:
            total_count_of_resources = cur.execute(
                'SELECT {} FROM resources WHERE tg_id = {}'.format(i[0], update.message.from_user.id)).fetchone()[0]
            if i[1] * count_of_buildings > total_count_of_resources:
                update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!', reply_markup=markup_fail)
                return CHANGE_OR_GO_TO_MENU_BUILDINGS
            spisok.append([i[0], i[1] * count_of_buildings])
        else:
            update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è!', reply_markup=markup_success)
            tranzaction_build(spisok[0][0], spisok[0][1], spisok[1][0], spisok[1][1], spisok[2][0], spisok[2][1],
                              context.chat_data['to_build'], count_of_buildings, update.message.from_user.id)
            buildings = cur.execute('SELECT {} FROM buildings WHERE tg_id = {}'
                                    .format(context.chat_data['to_build'], update.message.from_user.id)).fetchone()[0]

            if context.chat_data['to_build'] == 'farms':
                update.message.reply_text('–í–∞—à–∏ —Ñ–µ—Ä–º—ã: {}'.format(buildings))
            elif context.chat_data['to_build'] == 'quarries':
                update.message.reply_text('–í–∞—à–∏ –∫–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏: {}'.format(buildings))
            elif context.chat_data['to_build'] == 'sawmills':
                update.message.reply_text('–í–∞—à–∏ –ª–µ—Å–æ–ø–∏–ª–∫–∏: {}'.format(buildings))
            elif context.chat_data['to_build'] == 'iron_mines':
                update.message.reply_text('–í–∞—à–∏ –∂–µ–ª–µ–∑–Ω—ã–µ —à–∞—Ö—Ç—ã: {}'.format(buildings))
            elif context.chat_data['to_build'] == 'gold_mines':
                update.message.reply_text('–í–∞—à–∏ –∑–æ–ª–æ—Ç—ã–µ —Ä—É–¥–Ω–∏–∫–∏: {}'.format(buildings))
            upgrade_city_level(0.02 * count_of_buildings, update.message.from_user.id)
            return SUCCESSFUL_BUILD
    except ValueError:
        update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.',
                                  reply_markup=markup_fail)
        return CHANGE_OR_GO_TO_MENU_BUILDINGS


@log
def check_remelt(update: Update, context: CallbackContext):
    ore = cur.execute('SELECT {} FROM resources WHERE tg_id = {}'.format(context.chat_data['to_remelt'],
                                                                         update.message.from_user.id)).fetchone()[0]
    markup_fail = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                      resize_keyboard=True)
    markup_success = ReplyKeyboardMarkup([['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–ø–ª–∞–≤–∫—É'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                         resize_keyboard=True)
    try:
        d = {'iron_ore': 'iron', 'gold_ore': 'gold'}
        count = int(update.message.text)
        metal = cur.execute(
                    'SELECT {} FROM resources WHERE tg_id = {}'.format(d[context.chat_data['to_remelt']], update.message.from_user.id)).fetchone()[0]
        remelted_metal = count // 5 if context.chat_data['to_remelt'] == 'iron_ore' else count // 10
        max_metal = 1000 * cur.execute(
                    'SELECT {}_storages FROM buildings WHERE tg_id = {}'.format(d[context.chat_data['to_remelt']], update.message.from_user.id)).fetchone()[0]
        if max_metal < metal + remelted_metal:
            update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–ª–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞', reply_markup=markup_fail)
            return CHANGE_OR_GO_TO_MENU_REMELTING
        if count > ore:
            update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–¥—ã!', reply_markup=markup_fail)
            return CHANGE_OR_GO_TO_MENU_REMELTING
        elif count <= 0:
            raise ValueError
        else:
            update.message.reply_text('–ü–µ—Ä–µ–ø–ª–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É–ø–µ—à–Ω–æ!', reply_markup=markup_success)
            tranzaction_remelt(context.chat_data['to_remelt'], count, update.message.from_user.id)
            ore = cur.execute('SELECT {} FROM resources WHERE tg_id = {}'.format(context.chat_data['to_remelt'],
                                                                                 update.message.from_user.id)).fetchone()[
                0]
            if context.chat_data['to_remelt'] == 'iron_ore':
                iron = cur.execute(
                    'SELECT iron FROM resources WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
                update.message.reply_text('–í–∞—à–µ –∂–µ–ª–µ–∑–æ: {}\n–í–∞—à–∞ –∂–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞: {}'.format(iron, ore))
            elif context.chat_data['to_remelt'] == 'gold_ore':
                gold = cur.execute(
                    'SELECT gold FROM resources WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
                update.message.reply_text('–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {}\n–í–∞—à–∞ –∑–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞: {}'.format(gold, ore))
            return SUCCESSFUL_REMELTING
    except ValueError:
        update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.',
                                  reply_markup=markup_fail)
        return CHANGE_OR_GO_TO_MENU_REMELTING


@log
def build_farms(update: Update, context: CallbackContext):
    update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π —Ñ–µ—Ä–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –∂–µ–ª–µ–∑–∞ \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –µ–¥—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö'.format(*[i[1] for i in PRICE_OF_BUILDINGS['farms']]))
    context.chat_data['to_build'] = 'farms'
    return WAITING_FOR_COUNT_TO_BUILD


@log
def build_quarries(update: Update, context: CallbackContext):
    update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∫–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –∂–µ–ª–µ–∑–∞ \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –µ–¥—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö'.format(*[i[1] for i in PRICE_OF_BUILDINGS['quarries']]))
    context.chat_data['to_build'] = 'quarries'
    return WAITING_FOR_COUNT_TO_BUILD


@log
def build_sawmills(update: Update, context: CallbackContext):
    update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ª–µ—Å–æ–ø–∏–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –∂–µ–ª–µ–∑–∞ \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –µ–¥—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö'.format(*[i[1] for i in PRICE_OF_BUILDINGS['sawmills']]))
    context.chat_data['to_build'] = 'sawmills'
    return WAITING_FOR_COUNT_TO_BUILD


@log
def build_iron_mines(update: Update, context: CallbackContext):
    update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∂–µ–ª–µ–∑–Ω–æ–π —à–∞—Ö—Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –∂–µ–ª–µ–∑–∞ \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –µ–¥—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö'.format(*[i[1] for i in PRICE_OF_BUILDINGS['iron_mines']]))
    context.chat_data['to_build'] = 'iron_mines'
    return WAITING_FOR_COUNT_TO_BUILD


@log
def build_gold_mines(update: Update, context: CallbackContext):
    update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–æ–≥–æ —Ä—É–¥–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –∂–µ–ª–µ–∑–∞ \n'
                              ' {} –¥–µ—Ä–µ–≤–∞ \n'
                              ' {} –µ–¥—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö'.format(*[i[1] for i in PRICE_OF_BUILDINGS['gold_mines']]))
    context.chat_data['to_build'] = 'gold_mines'
    return WAITING_FOR_COUNT_TO_BUILD


def tranzaction_buy(type_of_material, summ, user):
    cur.execute('UPDATE resources SET gold = (SELECT gold FROM resources WHERE tg_id = {0}) - {1} '
                'WHERE tg_id = {0}'.format(user, summ))
    cur.execute('UPDATE resources SET {0} = (SELECT {0} FROM resources WHERE tg_id = {1}) + 5 * {2} '
                'WHERE tg_id = {1}'.format(type_of_material, user, summ))
    con.commit()


def increment_resourses(type_res, amount, user):
    storages = cur.execute('SELECT {} FROM buildings WHERE tg_id = {}'.format('{}_storages'.format(type_res), user)).fetchone()[0]
    resources_before = cur.execute('SELECT {} FROM resources WHERE tg_id = {}'.format(type_res, user)).fetchone()[0]
    max_count = storages * 1000
    if resources_before + amount >= max_count:
        cur.execute('UPDATE resources SET {0} = {2} WHERE tg_id = {1}'.format(type_res, user, max_count))
        con.commit()
        return max_count - resources_before if resources_before < max_count else 0
    cur.execute('UPDATE resources SET {0} = (SELECT {0} FROM resources WHERE tg_id = {1}) + {2} '
                'WHERE tg_id = {1}'.format(type_res, user, amount))
    con.commit()
    return -1


def tranzaction_build(type_1, count_1, type_2, count_2, type_3, count_3, building, count_of_buildings, user):
    cur.execute('UPDATE resources SET {0} = (SELECT {0} FROM resources WHERE tg_id = {1}) - {2} '
                'WHERE tg_id = {1}'.format(type_1, user, count_1))
    cur.execute('UPDATE resources SET {0} = (SELECT {0} FROM resources WHERE tg_id = {1}) - {2} '
                'WHERE tg_id = {1}'.format(type_2, user, count_2))
    cur.execute('UPDATE resources SET {0} = (SELECT {0} FROM resources WHERE tg_id = {1}) - {2} '
                'WHERE tg_id = {1}'.format(type_3, user, count_3))
    cur.execute('UPDATE buildings SET {0} = (SELECT {0} FROM buildings WHERE tg_id = {1}) + {2} '
                'WHERE tg_id = {1}'.format(building, user, count_of_buildings))
    con.commit()


def tranzaction_remelt(type_of_metal, count, user):
    if type_of_metal == 'iron_ore':
        cur.execute('UPDATE resources SET iron = (SELECT iron FROM resources WHERE tg_id = {0}) + ({1} / 5)'
                    'WHERE tg_id = {0}'.format(user, count))
        cur.execute('UPDATE resources SET iron_ore = (SELECT iron_ore FROM resources WHERE tg_id = {0}) - ({1})'
                    'WHERE tg_id = {0}'.format(user, count))
    elif type_of_metal == 'gold_ore':
        cur.execute('UPDATE resources SET gold = (SELECT gold FROM resources WHERE tg_id = {0}) + ({1} / 10)'
                    'WHERE tg_id = {0}'.format(user, count))
        cur.execute('UPDATE resources SET gold_ore = (SELECT gold_ore FROM resources WHERE tg_id = {0}) - ({1})'
                    'WHERE tg_id = {0}'.format(user, count))
    con.commit()


@log
def remelt_iron(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å. '
        '–ó–∞ 5 –µ–¥–∏–Ω–∏—Ü –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –µ–¥–∏–Ω–∏—Ü—É –∂–µ–ª–µ–∑–∞')
    context.chat_data['to_remelt'] = 'iron_ore'
    return WAITING_FOR_COUNT_OF_METAL


@log
def remelt_gold(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å. '
        '–ó–∞ 10 –µ–¥–∏–Ω–∏—Ü –∑–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞')
    context.chat_data['to_remelt'] = 'gold_ore'
    return WAITING_FOR_COUNT_OF_METAL


@log
def foreign_policy(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    war_level, in_spying = cur.execute('SELECT foreign_policy, in_spying FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()
    infantry, cavalry, sieges = cur.execute('SELECT * FROM army WHERE tg_id = {}'.format(user_id)).fetchone()[1:]
    
    if in_spying == -1:
        foreign_policy_markup = ReplyKeyboardMarkup([
            ['–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ ‚ÑπÔ∏è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
    elif in_spying != 0:
        foreign_policy_markup = ReplyKeyboardMarkup([
            ['–ù–∞ —Ä–∞–∑–≤–µ–¥–∫—É! ü•∑üèª', '–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ ‚ÑπÔ∏è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
    else:
        foreign_policy_markup = ReplyKeyboardMarkup([
            ['–†–∞—Å—á–∏—Å—Ç–∏—Ç—å –ø—É—Ç—å –∫ –≥–æ—Ä–æ–¥—É üß≠'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
    
    update.message.reply_text('–£—Ä–æ–≤–µ–Ω—å –≤–æ–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞: {} ü™ñ\n'
                              '–í–∞—à–∏ –≤–æ–π—Å–∫–∞:\n'
                              '‚†Ä‚†Äüèπ –ü–µ—Ö–æ—Ç–∞ ‚Äî {}\n'
                              '‚†Ä‚†Äüêé –ö–æ–Ω–Ω–∏—Ü–∞ ‚Äî {}\n'
                              '‚†Ä‚†Äü¶¨ –û—Å–∞–¥–Ω—ã–µ –º–∞—à–∏–Ω—ã ‚Äî {}'.format(war_level, infantry, 
                                                                cavalry, sieges),
                              reply_markup=foreign_policy_markup)
    return FOREIGN_POLICY


def calculate_random_shift(number, shift):
    try:
        return round(number + number * random.choice([i / 1000 for i in range(-shift*10, shift*10, 1)]))
    except IndexError:
        return number


def get_opposite_city(tg_id: int, context: CallbackContext, times):
    war_level = cur.execute('SELECT foreign_policy FROM cities WHERE tg_id = {}'.format(tg_id)).fetchone()[0]
    if 'opposite.name' not in context.chat_data:
        opposite_city = cur.execute('SELECT * FROM npc_cities WHERE id = {}'.format(war_level)).fetchone()
        
        context.chat_data['opposite.name'] = opposite_city[1]
        one_resourse = opposite_city[2] // 5
        context.chat_data['opposite.stone'] = round(one_resourse +
                                                    one_resourse *
                                                    random.choice([i / 100 for i in range(-12, 26, 1)]))
        opposite_city[2] -= context.chat_data['opposite.stone']
        context.chat_data['opposite.wood'] = round(one_resourse +
                                                   one_resourse *
                                                   random.choice([i / 100 for i in range(-12, 26, 1)]))
        opposite_city[2] -= context.chat_data['opposite.wood']
        context.chat_data['opposite.iron_ode'] = round(one_resourse +
                                                       one_resourse *
                                                       random.choice([i / 100 for i in range(-25, 16, 1)]))
        opposite_city[2] -= context.chat_data['opposite.iron_ode']
        context.chat_data['opposite.gold_ore'] = round(one_resourse +
                                                       one_resourse *
                                                       random.choice([i / 100 for i in range(-25, 16, 1)]))
        opposite_city[2] -= context.chat_data['opposite.gold_ore']
        context.chat_data['opposite.food'] = opposite_city[2]
        context.chat_data['opposite.gold'] = opposite_city[3]
        context.chat_data['opposite.infantry'] = opposite_city[4]
        context.chat_data['opposite.cavalry'] = opposite_city[5]
        context.chat_data['opposite.requiered_sieges'] = opposite_city[6]
        context.chat_data['opposite.farms'] = opposite_city[8]
        context.chat_data['opposite.quarries'] = opposite_city[9]
        context.chat_data['opposite.sawmills'] = opposite_city[10]
        context.chat_data['opposite.population'] = opposite_city[11]

    if times == 0:
        P_r, P_w = 20, 33
    elif times == 1:
        P_r, P_w = 15, 20
    elif times == 2:
        P_r, P_w = 10, 10
    elif times == 3:
        P_r, P_w = 0, 0
        
    context.chat_data['opposite.fake_stone'] = calculate_random_shift(context.chat_data['opposite.stone'],
                                                                      P_r - 0.5 * war_level)
    context.chat_data['opposite.fake_wood'] = calculate_random_shift(context.chat_data['opposite.wood'],
                                                                     P_r - 0.5 * war_level)
    context.chat_data['opposite.fake_iron_ode'] = calculate_random_shift(context.chat_data['opposite.iron_ode'],
                                                                         P_r - 0.5 * war_level)
    context.chat_data['opposite.fake_gold_ore'] = calculate_random_shift(context.chat_data['opposite.gold_ode'],
                                                                         P_r - 0.5 * war_level)
    context.chat_data['opposite.fake_food'] = calculate_random_shift(context.chat_data['opposite.food'],
                                                                     P_r - 0.5 * war_level)
    context.chat_data['opposite.fake_infantry'] = calculate_random_shift(context.chat_data['opposite.infantry'],
                                                                         P_w - 0.5 * war_level)
    context.chat_data['opposite.fake_cavalry'] = calculate_random_shift(context.chat_data['opposite.cavalry'],
                                                                        P_w - 0.5 * war_level)
    context.chat_data['opposite.fake_requiered_sieges'] = calculate_random_shift(context.chat_data['opposite.requiered_sieges'],
                                                                                 P_w - 0.5 * war_level)
    context.chat_data['opposite.fake_population'] = calculate_random_shift(context.chat_data['opposite.population'],
                                                                           P_w - 0.5 * war_level)

@log
def path_to_city(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    
    war_level = cur.execute('SELECT foreign_policy FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    opposite_city = cur.execute('SELECT * FROM npc_cities WHERE id = {}'.format(war_level)).fetchone()
    
    chance = random.random() + war_level * 0.05
    
    if chance <= 0.1:
        cur.execute('UPDATE cities SET in_spying = -1 WHERE tg_id = {}'.format(user_id))
        legend = '–ö–∞–Ω–∞–ª—å—è! –ù–∞—Å –∑–∞—Å–µ–∫–ª–∏... –ü—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∑—É –∏–¥—Ç–∏ –≤ –±–æ–π, —É –Ω–∞—Å –Ω–µ—Ç –≤—ã—Ö–æ–¥–∞.\n\n'
        war_markup = ReplyKeyboardMarkup([
            ['–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
    else:
        cur.execute('UPDATE cities SET in_spying = 1 WHERE tg_id = {}'.format(user_id))
        legend = '–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–º–æ–≥–ª–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ä–∞—Å—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏!\n\n'
        war_markup = ReplyKeyboardMarkup([
            ['–ù–∞ —Ä–∞–∑–≤–µ–¥–∫—É! ü•∑üèª', '–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
    con.commit()
    
    phrase = random.choice(['–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —ç—Ç–æ', '–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç, —á—Ç–æ —ç—Ç–æ', 
                            '–ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —ç—Ç–æ', '–ü–æ –≤—Å–µ–º—É –º–∏—Ä—É —ç—Ç–æ –º–µ—Å—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫',
                            '–í–µ–∑–¥–µ —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —ç—Ç–æ', '–í—Å–µ–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ',
                            '–í–µ–∑–¥–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ', '–ü–æ –≤—Å–µ–º—É –º–∏—Ä—É —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —ç—Ç–æ',
                            '–í—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ —ç—Ç–æ', '–í—Å–µ–º —ç—Ç–æ –º–µ—Å—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫']) + opposite_city[7] + '...\n\n'

    get_opposite_city(user_id, context, 0)
    
    update.message.reply_text(
        legend + phrase + '–í–æ—Ç —á—Ç–æ –º—ã —Å–º–æ–≥–ª–∏ —Ä–∞–∑–≤–µ–¥–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á–∏—Å—Ç–∫–∏ –ø—É—Ç–∏.\n'
        'üè∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {}\n'
        'üí∞ –ò–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –æ –±—é–¥–∂–µ—Ç–µ –Ω–∞–º –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ {} –∑–æ–ª–æ—Ç–∞.\n\n'
        '–ú—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏ —Å—Ç—Ä–∞–∂—É –≤–æ–∫—Ä—É–≥, –Ω–æ –º–æ–≥–ª–∏ –æ—à–∏–±–∏—Ç—å—Å—è. –í –≥–æ—Ä–æ–¥–µ:\n'
        '‚†Ä‚†Ä- {} –∂–∏—Ç–µ–ª–µ–π üë•\n'
        '‚†Ä‚†Ä- {} –ø–µ—Ö–æ—Ç—ã üèπ\n'
        '‚†Ä‚†Ä- {} –∫–∞–≤–∞–ª–µ—Ä–∏–∏ üêé\n'
        '‚†Ä‚†Ä–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è {} –æ—Å–∞–¥–Ω—ã—Ö –º–∞—à–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–±–∏—Ç—å —Å—Ç–µ–Ω—ã ü¶¨\n\n'
        '–û—á–µ–Ω—å –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö:\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∫–∞–º–Ω—è ü™®\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –¥–µ—Ä–µ–≤–∞ ü™µ\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –µ–¥—ã ü•©\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã üè≠\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∑–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã üè≠\n\n'
        '–ó–∞ —Å—Ç–µ–Ω–∞–º–∏ –º—ã —Ä–∞–∑–≥–ª—è–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–∞. –í –≥–æ—Ä–æ–¥–µ —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç:\n'
        '‚†Ä‚†Ä- {} —Ñ–µ—Ä–º üßëüèª‚Äçüåæ\n'
        '‚†Ä‚†Ä- {} –∫–∞–º–µ–Ω–æ–ª–æ–º–µ–Ω ü™®\n'
        '‚†Ä‚†Ä- {} –ª–µ—Å–æ–ø–∏–ª–æ–∫ ü™µ\n\n'
        '–ú—ã –º–æ–∂–µ–º –ø–æ–∏—Ç–∏ –≤ —Ä–∞–∑–≤–µ–¥–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'.format(
            context.chat_data['opposite.name'], context.chat_data['opposite.gold'],
            context.chat_data['opposite.fake_population'], context.chat_data['opposite.fake_infantry'],
            context.chat_data['opposite.fake_cavalry'], context.chat_data['opposite.fake_requiered_sieges'],
            context.chat_data['opposite.fake_stone'], context.chat_data['opposite.fake_wood'],
            context.chat_data['opposite.fake_food'], context.chat_data['opposite.fake_iron_ode'],
            context.chat_data['opposite.fake_gold_ore'], context.chat_data['opposite.farms'],
            context.chat_data['opposite.quarries'], context.chat_data['opposite.sawmills']
        ), reply_markup=war_markup
    )

    return FOREIGN_POLICY


@log
def scouting(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    
    war_level = cur.execute('SELECT foreign_policy FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    in_spying = cur.execute('SELECT in_spying FROM cities WHERE tg_id = {}'.format(user_id)).fetchone()[0]
    chance = random.random() + war_level * 0.05
    
    if in_spying == 1:
        max_chance = 0.63
    elif in_spying == 2:
        max_chance = 0.76
    elif in_spying == 3:
        max_chance = 0.9
    
    if chance <= max_chance:
        cur.execute('UPDATE cities SET in_spying = -1 WHERE tg_id = {}'.format(user_id))
        war_markup = ReplyKeyboardMarkup([
            ['–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ ‚ÑπÔ∏è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ], one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text('! –ù–∞—Å –∑–∞—Å–µ–∫–ª–∏... –ü—Ä–∏–¥—ë—Ç—Å—è –∏–¥—Ç–∏ –≤ –±–æ–π, —É –Ω–∞—Å –Ω–µ—Ç –≤—ã—Ö–æ–¥–∞.',
                                  reply_markup=war_markup)
        con.commit()
        return FOREIGN_POLICY
    else:
        legend = '–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–º–æ–≥–ª–∏ —Ä–∞–∑–≤–µ–¥–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n\n'
        
        if in_spying == 3:
            cur.execute('UPDATE cities SET in_spying = -1 WHERE tg_id = {}'.format(user_id))
            war_markup = ReplyKeyboardMarkup([
                ['–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
                ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
            ], one_time_keyboard=False, resize_keyboard=True)
        else:
            cur.execute('UPDATE cities SET in_spying = {} WHERE tg_id = {}'.format(in_spying + 1, user_id))
            war_markup = ReplyKeyboardMarkup([
                ['–ù–∞ —Ä–∞–∑–≤–µ–¥–∫—É! ü•∑üèª', '–í –∞—Ç–∞–∫—É! ‚öîÔ∏è'],
                ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
            ], one_time_keyboard=False, resize_keyboard=True)     
        con.commit()
    
    get_opposite_city(user_id, context, in_spying)
    
    update.message.reply_text(
        legend + '–ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å —Ä–∞–∑–≤–µ–¥–∫–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.\n'
        '–í–Ω—É—Ç—Ä–∏ –≥–æ—Ä–æ–¥–∞ –º—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∏ –∂–∏—Ç–µ–ª–µ–π, –≤—Å—ë –µ—â—ë –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏. –í –≥–æ—Ä–æ–¥–µ:\n' if in_spying != 3 else '–í–Ω—É—Ç—Ä–∏ –≥–æ—Ä–æ–¥–∞ –º—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∏ –∂–∏—Ç–µ–ª–µ–π, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ –æ—à–∏–±–æ–∫. –í –≥–æ—Ä–æ–¥–µ:\n'
        '‚†Ä‚†Ä- {} –∂–∏—Ç–µ–ª–µ–π üë•\n'
        '‚†Ä‚†Ä- {} –ø–µ—Ö–æ—Ç—ã üèπ\n'
        '‚†Ä‚†Ä- {} –∫–∞–≤–∞–ª–µ—Ä–∏–∏ üêé\n'
        '‚†Ä‚†Ä–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è {} –æ—Å–∞–¥–Ω—ã—Ö –º–∞—à–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–±–∏—Ç—å —Å—Ç–µ–Ω—ã ü¶¨\n\n' if in_spying != 3 else '‚†Ä‚†Ä–ù–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è {} –æ—Å–∞–¥–Ω—ã—Ö –º–∞—à–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–±–∏—Ç—å —Å—Ç–µ–Ω—ã ü¶¨\n\n'
        '–ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö:\n' if in_spying != 3 else '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö:\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∫–∞–º–Ω—è ü™®\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –¥–µ—Ä–µ–≤–∞ ü™µ\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –µ–¥—ã ü•©\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã üè≠\n'
        '‚†Ä‚†Ä- {} –µ–¥–∏–Ω–∏—Ü –∑–æ–ª–æ—Ç–æ–π —Ä—É–¥—ã üè≠\n\n'
        '–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ–¥–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.' if in_spying != 3 else '–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Ä—É–∫–∞—Ö. –¢–µ–ø–µ—Ä—å –º—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ—é!'
        ''.format(
            context.chat_data['opposite.name'], context.chat_data['opposite.gold'],
            context.chat_data['opposite.fake_population'], context.chat_data['opposite.fake_infantry'],
            context.chat_data['opposite.fake_cavalry'], context.chat_data['opposite.fake_requiered_sieges'],
            context.chat_data['opposite.fake_stone'], context.chat_data['opposite.fake_wood'],
            context.chat_data['opposite.fake_food'], context.chat_data['opposite.fake_iron_ode'],
            context.chat_data['opposite.fake_gold_ore'], context.chat_data['opposite.farms'],
            context.chat_data['opposite.quarries'], context.chat_data['opposite.sawmills']
        ), reply_markup=war_markup
    )
    
    return FOREIGN_POLICY
