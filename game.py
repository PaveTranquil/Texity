import sqlite3

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import CallbackContext

from logger import log

con = sqlite3.connect("players.db", check_same_thread=False)
cur = con.cursor()
list_of_players = [i[0] for i in cur.execute('SELECT tg_id FROM cities').fetchall()]

RESOURCES, MARKET, POPULATION, CONSTRUCTION, FOREIGN_POLICY, INFO, WAITING_FOR_SUMM, CHANGE_OR_GO_TO_MENU, NOT_ENOUGH_GOLD, BAD_SUMM, SUCCESSFUL_BUYING = range(
    2, 13)
WAITING_FOR_CITY_NAME, MENU = range(2)


@log
def get_info_about_city(update: Update, context: CallbackContext):
    resources_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    user_id = update.message.from_user.id
    if user_id in list_of_players:
        resources_1 = cur.execute('SELECT farms FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        resources_2 = cur.execute('SELECT quarries FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        resources_3 = cur.execute('SELECT sawmills FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        resources_4 = cur.execute('SELECT iron_mines FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        resources_5 = cur.execute('SELECT gold_mines FROM buildings WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        update.message.reply_text('–í–∞—à–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è\n'
                                  'üßëüèª‚Äçüåæ –§–µ—Ä–º—ã: {}\n'
                                  'ü™® –ö–∞–º–µ–Ω–æ–ª–æ–º–Ω–∏: {}\n'
                                  'ü™µ –õ–µ—Å–æ–ø–∏–ª–∫–∏: {}\n'
                                  'üè≠ –ñ–µ–ª–µ–∑–Ω—ã–µ —Ä—É–¥–Ω–∏–∫–∏: {}\n'
                                  'üí∞ –ó–æ–ª–æ—Ç—ã–µ —Ä—É–¥–Ω–∏–∫–∏: {}'.format(
            resources_1, resources_2, resources_3, resources_4, resources_5
        ), reply_markup=resources_markup)
    else:
        update.message.reply_text('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬Ø\_(„ÉÑ)_/¬Ø')
    return INFO


@log
def resources(update: Update, context: CallbackContext):
    resources_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    user_id = update.message.from_user.id
    if user_id in list_of_players:
        stone = cur.execute('SELECT stone FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        wood = cur.execute('SELECT wood FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        #        iron = cur.execute('SELECT iron FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        gold = cur.execute('SELECT gold FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        gold_ore = cur.execute('SELECT gold_ore FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        iron_ore = cur.execute('SELECT iron_ore FROM resources WHERE tg_id = {}'.format(user_id)).fetchone()[0]
        update.message.reply_text('–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã\n'
                                  '–ï–¥–∞: {}\n'
                                  '–ö–∞–º–Ω–∏: {}\n'
                                  '–î–µ—Ä–µ–≤–æ: {}\n'
                                  '–ó–æ–ª–æ—Ç–æ: {}\n'
                                  '–ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞: {}\n'
                                  '–ñ–µ–ª–µ–∑–æ: {}\n'
                                  '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞: {}'.format('', stone, wood, '', gold, gold_ore, iron_ore),
                                  reply_markup=resources_markup)
    else:
        update.message.reply_text('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬Ø\_(„ÉÑ)_/¬Ø')
    return RESOURCES


@log
def market(update: Update, context: CallbackContext):
    market_markup = ReplyKeyboardMarkup([['–ï–¥–∞', '–î–µ—Ä–µ–≤–æ'],
                                         ['–ö–∞–º–Ω–∏', '–ñ–µ–ª–µ–∑–æ'],
                                         ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text("–†—ã–Ω–æ–∫", reply_markup=market_markup)
    return MARKET


def buy_food(update: Update, context: CallbackContext):
    markup = ReplyKeyboardMarkup([], one_time_keyboard=False,
                                 resize_keyboard=True)
    update.message.reply_text('–ó–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –∑–æ–ª–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –µ–¥–∏–Ω–∏—Ü –µ–¥—ã', reply_markup=markup)
    return WAITING_FOR_SUMM


def check_food_and_wood(update: Update, context: CallbackContext):
    gold = cur.execute('SELECT gold FROM resources WHERE tg_id = {}'.format(update.message.from_user.id)).fetchone()[0]
    try:
        if int(update.message.text) > gold:
            markup = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                         resize_keyboard=True)
            update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!', reply_markup=markup)
            return CHANGE_OR_GO_TO_MENU
        elif int(update.message.text) <= 0:
            markup = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                         resize_keyboard=True)
            update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.',
                                      reply_markup=markup)
            return CHANGE_OR_GO_TO_MENU
        else:
            update.message.reply_text('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É–ø–µ—à–Ω–æ!')
            return MENU
    except ValueError:
        markup = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                     resize_keyboard=True)
        update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.', reply_markup=markup)
        return CHANGE_OR_GO_TO_MENU


def successful_buying(update: Update, context: CallbackContext):
    update.message.reply_text('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É–ø–µ—à–Ω–æ!')
    return MENU


def not_enough_gold(update: Update, context: CallbackContext):
    markup = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                 resize_keyboard=True)
    update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!', reply_markup=markup)
    return CHANGE_OR_GO_TO_MENU


def bad_summ(update: Update, context: CallbackContext):
    print('oooooooooooooooo')
    markup = ReplyKeyboardMarkup([['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False,
                                 resize_keyboard=True)
    update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.', reply_markup=markup)
    return CHANGE_OR_GO_TO_MENU


@log
def population(update: Update, context: CallbackContext):
    population_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text("–í–∞—à–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ", reply_markup=population_markup)
    return POPULATION


@log
def construction(update: Update, context: CallbackContext):
    construction_markup = ReplyKeyboardMarkup([['–§–µ—Ä–º–∞', '–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è', '–õ–µ—Å–æ–ø–∏–ª–∫–∞'],
                                               ['–ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫', '–ó–æ–ª–æ—Ç–æ–π —Ä—É–¥–Ω–∏–∫'],
                                               ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text(
        "–ö–∞–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=construction_markup)
    return CONSTRUCTION


@log
def foreign_policy(update: Update, context: CallbackContext):
    foreign_policy_markup = ReplyKeyboardMarkup([['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']], one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text(
        "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞", reply_markup=foreign_policy_markup)
    return FOREIGN_POLICY
